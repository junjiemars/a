#!/bin/sh

_ROOT_DIR_="`cd -- $(dirname -- $0) && pwd`"
_CI_DIR_="${_ROOT_DIR_%/}/ci"
_BRANCH_="${_BRANCH_:-edge}"
_OS_NAME_="`uname -s 2>/dev/null`"
_MSVC_ENV_=
_TRACE_="${_TRACE_}"

case "${_OS_NAME_}" in
  MSYS_NT-*|MINGW??_NT-*) _OS_NAME_="WinNT" ;;
esac

CC="${CC}"
if [ -z "$CC" ]; then
  case "$_OS_NAME_" in
    Darwin)                 CC="clang" ;;
    Linux)                  CC="gcc"   ;;
    WinNT)                  CC="cl"    ;;
  esac
fi


env_ci_build () {
  echo "------------"
  echo "CC=$CC"
  echo "_ROOT_DIR_=$_ROOT_DIR_"
  echo "_CI_DIR_=$_CI_DIR_"
  echo "------------"

  cd "${_CI_DIR_}"

  if [ "WinNT" = "${_OS_NAME_}" -a "cl" = "${CC}" ]; then
    if [ ! -f "${HOME}/.nore/cc-env.sh" ]; then
      echo "!panic: ${HOME}/.nore/cc-env.sh no found"
      exit 1
    fi
    ${HOME}/.nore/cc-env.sh 1

    if [ ! -f "${HOME}/.nore/cc-env.bat" ]; then
      echo "!panic: ${HOME}/.nore/cc-env.bat no found"
      exit 1
    fi
    _MSVC_ENV_="${HOME}/.nore/cc-env.bat"
  fi
}

test_what () {
  echo "------------"
  echo "# $@ ..."
  echo "------------"
}

test_configure () {
  local msvc_bat="msvc.bat"
  cd "$_CI_DIR_"
  if [ -z "${_MSVC_ENV_}" ]; then
    ./configure ${_TRACE_} $@
  else
    cat << END > "${msvc_bat}"
@if not "%VSCMD_DEBUG%" GEQ "3" echo off
REM generated by Nore (https://github.com/junjiemars/nore)
call "%1"
sh ./configure ${_TRACE_} $@
END
    if [ ! -f "${msvc_bat}" ]; then
      echo "!panic: generate msvc.bat failed"
      exit 1
    fi
    chmod u+x ${msvc_bat}
    ./${msvc_bat} "${_MSVC_ENV_}"
  fi
}

clone_nore_from_github () {
  local b="https://raw.githubusercontent.com/junjiemars/nore/master/bootstrap.sh"
  test_what "install from github.com"
  if [ -d "$_CI_DIR_" ]; then
    rm -r "${_CI_DIR_}"
  fi
  mkdir -p "$_CI_DIR_" && cd "$_CI_DIR_"

  curl $b -sSfL | sh -s -- --branch=$_BRANCH_
}

test_make_print_database () {
  test_what "print the make's predefined database"
  make -C "$_CI_DIR_" -p 2>&1 || echo "------------"
}

test_make () {
  local msvc_bat="msvc.bat"
  cd "$_CI_DIR_"
  if [ -z "${_MSVC_ENV_}" ]; then
    make $@
  else
    cat << END > "${msvc_bat}"
@if not "%VSCMD_DEBUG%" GEQ "3" echo off
REM generated by Nore (https://github.com/junjiemars/nore)
call "%1"
"%2" "%3"
END
    if [ ! -f "${msvc_bat}" ]; then
      echo "!panic: generate msvc.bat failed"
      exit 1
    fi
    chmod u+x ${msvc_bat}
    ./${msvc_bat} "${_MSVC_ENV_}" "make $@"
  fi
}

test_nore_where_command () {
  test_what "./configure where"
  test_configure where
}

test_c_program () {
  local c="`basename $_CI_DIR_`.c"
  local m="Makefile"

  cat <<END > "$c"
#include <nore.h>

#if (DARWIN)
#  if !defined(_DARWIN_C_SOURCE)
#    define _DARWIN_C_SOURCE
#  endif
#endif


#if (LINUX)
#  if !defined(_GNU_SOURCE)
#    define _GNU_SOURCE
#  endif
#endif


#if defined(_POSIX_C_SOURCE)
#  undef _POSIX_C_SOURCE
#endif
#define _POSIX_C_SOURCE  200809L


#if !defined(__has_attribute)
#  if !defined(__attribute)
#    define _esc_(...)  __VA_ARGS__
#    define __attribute__(_)  _esc_ _
#  endif
#endif


#if (MSVC)
#  if !defined(unused)
#    define unused  __pragma(warning(suppress:4100 4101 4189))
#  endif
#elif !defined(__has_attribute) && defined(__attribute__)
#   if !defined(unused)
#     define unused
#   endif
#endif


#if !defined(__has_attribute) && defined(__attribute__)
#  if !defined(fallthrough)
#    define fallthrough
#  endif
#endif



#if !(NM_HAVE_RESTRICT)
#  if (NM_HAVE___RESTRICT)
#    define restrict __restrict
#  else
#    define restrict
#  endif
#endif  /* NM_HAVE_RESTRICT */



#if !defined(_isut_)
#  define _isut_(t)  (((t)~1) > 0)
#endif  /* _isut_ */


#if !defined(_nof_)
#  define _nof_(a)  (sizeof(a)/sizeof(*(a)))
#endif  /* _nof_ */


#if !defined(_diff_)
#  define _diff_(l, r, w)  (((char*)(r) - (char*)(l)) / (w))
#endif  /* _diff_ */


#if !defined(_max_)
#  define _max_(a, b)  (((a) > (b)) ? (a) : (b))
#endif  /* _max_ */


#if !defined(_min_)
#  define _min_(a, b)  (((a) < (b)) ? (a) : (b))
#endif  /* _min_ */


#if !defined(_str_)
#  define _str_(s)  #s
#endif  /* _str_ */



#define _swp_(a, b, w)                            \
do                                                \
  {                                               \
    int    w1_ =  (int) (w);                      \
    int    n1_ =  (w1_ + 7) / 8;                  \
    char  *a1_ =  (char *) (a);                   \
    char  *b1_ =  (char *) (b);                   \
    char   t1_ =  0;                              \
    switch (w1_ % 8) {                            \
    case 0: do { t1_=*a1_;*a1_++=*b1_;*b1_++=t1_; \
        __attribute__((fallthrough));             \
    case 7:      t1_=*a1_;*a1_++=*b1_;*b1_++=t1_; \
        __attribute__((fallthrough));             \
    case 6:      t1_=*a1_;*a1_++=*b1_;*b1_++=t1_; \
        __attribute__((fallthrough));             \
    case 5:      t1_=*a1_;*a1_++=*b1_;*b1_++=t1_; \
        __attribute__((fallthrough));             \
    case 4:      t1_=*a1_;*a1_++=*b1_;*b1_++=t1_; \
        __attribute__((fallthrough));             \
    case 3:      t1_=*a1_;*a1_++=*b1_;*b1_++=t1_; \
        __attribute__((fallthrough));             \
    case 2:      t1_=*a1_;*a1_++=*b1_;*b1_++=t1_; \
        __attribute__((fallthrough));             \
    case 1:      t1_=*a1_;*a1_++=*b1_;*b1_++=t1_; \
               } while (--n1_ > 0);               \
    }                                             \
  } while (0)

#include <assert.h>


#if !(NM_HAVE_STATIC_ASSERT)
#  ifdef static_assert
#    undef static_assert
#  endif
#  define static_assert(e, m) enum {static_assert = 1/!!((e) && (m))}

#endif  /* NM_HAVE_STATIC_ASSERT */

#if !defined(NM_HAVE_STDINT_H)
#  error "<stdint.h> no found"
#endif


#include <stdint.h>


#if (MSVC)
typedef __int8            int8_t;
typedef unsigned __int8   uint8_t;
typedef __int16           int16_t;
typedef unsigned __int16  uint16_t;
typedef __int32           int32_t;
typedef unsigned __int32  uint32_t;
typedef __int64           int64_t;
typedef unsigned __int64  uint64_t;
#endif


#if (NM_HAVE_SSIZE_T)
#  if (MSVC)
#    include <BaseTsd.h>
typedef SSIZE_T ssize_t;
#  else
#    include <sys/types.h>
#  endif
#else
typedef long ssize_t;
#endif


#if (MSVC)
#  pragma warning(disable:4996)
#endif  /* _CRT_SECURE_NO_WARNINGS */


#include <string.h>


#if !(NM_HAVE_STRDUP)
#  error "strdup no found"
#else
#  if (MSVC)
#    define strdup  _strdup
#  endif
#endif  /* strdup */



/* #include <nio.h> */
/* #include <stddef.h> */



#if (MSVC)
#  include <windows.h>
#  include <process.h>
#else
#  include <sys/types.h>
#  include <unistd.h>
#endif


#if !(NM_HAVE_SLEEP)
#  error "sleep no found"
#elif (MSVC)
#  define sleep(x)  Sleep((x) * 1000)
#endif  /* sleep */


#if !(NM_HAVE_GETPID)
#  error "getpid no found"
#elif (WINNT)
#  define getpid  _getpid
#endif  /* getpid */

#include <stdio.h>

static void test_sleep(void);
static void test_getpid(void);


int
main(void)
{
  test_sleep();
  test_getpid();

  return 0;
}


void
test_sleep(void)
{
  printf("sleep(1) ...\n");
  sleep(1);
}

void
test_getpid(void)
{
  printf("pid: %d\n", getpid());
}

END


  cat <<END > "$m"
include out/Makefile

ci_root := ./
ci_binout := \$(bin_path)/ci\$(bin_ext)
ci_cppout := \$(tmp_path)/ci\$(cpp_ext)

ci: \$(ci_binout)
ci_test: ci
	@cat \$(ci_cppout)
	@\$(ci_binout)

\$(ci_binout): \$(ci_cppout)
	\$(CC) \$(CFLAGS) \$^ \$(bin_out)\$@

\$(ci_cppout): \$(ci_root)/ci.c
	\$(CC) \$(CPPFLAGS) \$(INC) \$(nm_stage_pre) \$^ \$(cpp_out)\$@
	@cat \$@

END

  test_what "CC=$CC ./configure --with-optimize=yes"
  test_configure --with-optimize=yes
  test_make clean test
}

# clone nore
if [ -n "$_INSIDE_CI_" ]; then
  clone_nore_from_github
fi

# env build
env_ci_build

# test_make_print_database
test_nore_where_command
test_c_program
# cat /etc/passwd


echo "#!completed"

# eof
